#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_install_ruby__2
source ynh_add_swap
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
language=$(ynh_app_setting_get --app=$app --key=language)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
redis_namespace=$(ynh_app_setting_get --app=$app --key=db_name)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$(ynh_app_setting_get --app=$app --key=db_user)
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
admin_mail=$(ynh_user_get_info --username=$admin --key='mail')
port_web=$(ynh_app_setting_get --app=$app --key=port_web)
port_stream=$(ynh_app_setting_get --app=$app --key=port_stream)

secret_key_base=$(ynh_app_setting_get --app=$app --key=secret_key_base)
otp_secret=$(ynh_app_setting_get --app=$app --key=otp_secret)
vapid_private_key=$(ynh_app_setting_get --app=$app --key=vapid_private_key)
vapid_public_key=$(ynh_app_setting_get --app=$app --key=vapid_public_key)

config="$final_path/live/.env.production"

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="stop" --log_path=systemd
ynh_systemd_action --service_name=${app}-sidekiq --action="stop" --log_path=systemd
ynh_systemd_action --service_name=${app}-streaming --action="stop" --log_path=systemd

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --auth_header="false" --show_tile="false" --protected="true"
fi

# If port_web doesn't exist, create it, needed for old install
if [[ -z "$port_web" ]]; then
	port_web=3000
	ynh_app_setting_set --app=$app --key=port_web --value=$port_web
fi

# If port_web doesn't exist, create it, needed for old install
if [[ -z "$port_stream" ]]; then
	port_stream=4000
	ynh_app_setting_set --app=$app --key=port_stream --value=$port_stream
fi

# If db_user doesn't exist, create it, needed for old install
if [[ -z "$db_user" ]]; then
	db_user=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_user --value=$db_user
fi

# If db_pwd doesn't exist, create it, needed for old install
if [[ -z "$db_pwd" ]]; then
	db_pwd=$(ynh_string_random)
	ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd
	ynh_psql_test_if_first_run
	sudo --login --user=postgres psql -c"ALTER user $app WITH PASSWORD '$db_pwd'" postgres
	ynh_replace_string --match_string="DB_PASS=" --replace_string="DB_PASS=${db_pwd}" --target_file="$config"
fi

# Remove paperclip_secret
ynh_app_setting_delete --app=$app --key=paperclip_secret

# If secret_key_base doesn't exist, retrieve it or create it
if [[ -z "$secret_key_base" ]]; then
	secret_key_base=$(grep -oP "SECRET_KEY_BASE=\K\w+" $config)
	if [[ -z "$secret_key_base" ]]; then
		secret_key_base=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=secret_key_base --value="$secret_key_base"
fi

# If otp_secret doesn't exist, retrieve it or create it
if [[ -z "$otp_secret" ]]; then
	otp_secret=$(grep -oP "OTP_SECRET=\K\w+" $config)
	if [[ -z "$otp_secret" ]]; then
		otp_secret=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=otp_secret --value="$otp_secret"
fi

# If vapid_private_key doesn't exist, retrieve it or create it
if [[ -z "$vapid_private_key" ]]; then
	vapid_private_key=$(grep -oP "VAPID_PRIVATE_KEY=\K.+" $config)
	vapid_public_key=$(grep -oP "VAPID_PUBLIC_KEY=\K.+" $config)
	ynh_app_setting_set "$app" vapid_private_key "$vapid_private_key"
	ynh_app_setting_set "$app" vapid_public_key "$vapid_public_key"
fi

# If redis_namespace doesn't exist, create it
if [[ -z "$redis_namespace" ]]; then
	redis_namespace=${app}_production
	ynh_app_setting_set --app=$app --key=redis_namespace --value=$redis_namespace
fi

#Remove previous added repository
ynh_remove_extra_repo

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download Mastodon
	tmpdir="$(mktemp -d)"

	mkdir $tmpdir/system
	if [ -d "$final_path/live/public/system" ]; then
		mv --verbose --no-target-directory --backup=numbered "$final_path/live/public/system" "$final_path/system.tmp"
	fi
	rsync -a "$config" "$tmpdir/."
	ynh_secure_remove --file="$final_path/live"
	
	ynh_setup_source --dest_dir="$final_path/live"

	if [ -d "$final_path/system.tmp" ]; then
		mv --verbose --no-target-directory "$final_path/system.tmp" "$final_path/live/public/system"
	fi
	rsync -a "$tmpdir/.env.production" "$final_path/live/."
	ynh_secure_remove --file="$tmpdir"

	# Clean files which are not needed anymore
	ynh_secure_remove --file="$final_path/live/config/initializers/timeout.rb"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies $build_pkg_dependencies
ynh_exec_warn_less ynh_install_ruby --ruby_version=$ruby_version
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version
ynh_exec_warn_less ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression --message="Adding swap if needed..." --weight=1

total_memory=$(ynh_get_ram --total)
swap_needed=0

if [ $total_memory -lt $memory_needed ]; then
	# Need a minimum of 8Go of memory
	swap_needed=$(($memory_needed - $total_memory))
fi

ynh_script_progression --message="Adding $swap_needed Mo to swap..."
ynh_add_swap --size=$swap_needed

#=================================================
# BUILD APP
#=================================================
ynh_script_progression --message="Building app..." --weight=1

pushd "$final_path/live"
	ynh_use_ruby
	ynh_gem update --system
	ynh_gem install bundler --no-document
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config deployment 'true'
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config without 'development test'
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config set force_ruby_platform true --quiet
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle install -j$(getconf _NPROCESSORS_ONLN)
	ynh_use_nodejs
	ynh_exec_as $app $ynh_node_load_PATH yarn install --pure-lockfile
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:clean
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:precompile
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails db:migrate
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/tootctl cache clear
popd

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies
ynh_package_autoremove

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a config file..." --weight=1

language="$(echo $language | head -c 2)"

ynh_add_config --template="../conf/.env.production.sample" --destination="$config"

chmod 400 "$config"
chown $app:$app "$config"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-web" --template="mastodon-web.service"
ynh_add_systemd_config --service="$app-sidekiq" --template="mastodon-sidekiq.service"
ynh_add_systemd_config --service="$app-streaming" --template="mastodon-streaming.service"

#=================================================
# SETUP THE CRON FILE
#=================================================
ynh_script_progression --message="Setuping the cron file..." --weight=1

ynh_add_config --template="../conf/cron" --destination="/etc/cron.d/$app"

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add "$app-web" --description="$app web service"
yunohost service add "$app-sidekiq" --description="$app sidekiq service"
yunohost service add "$app-streaming" --description="$app streaming service"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="start" --log_path=systemd --line_match="Listening on"
ynh_systemd_action --service_name=${app}-sidekiq --action="start" --log_path=systemd --line_match="Schedules Loaded"
ynh_systemd_action --service_name=${app}-streaming --action="start" --log_path=systemd --line_match="Streaming API now listening"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
