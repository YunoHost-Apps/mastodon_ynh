#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_install_ruby__2
source ynh_add_swap
source /usr/share/yunohost/helpers

upgrade_type=$(ynh_check_app_version_changed)
config="$install_dir/live/.env.production"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Remove paperclip_secret
ynh_app_setting_delete --app=$app --key=paperclip_secret

# If secret_key_base doesn't exist, retrieve it or create it
if [[ -z "$secret_key_base" ]]; then
	secret_key_base=$(grep -oP "SECRET_KEY_BASE=\K\w+" $config)
	if [[ -z "$secret_key_base" ]]; then
		secret_key_base=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=secret_key_base --value="$secret_key_base"
fi

# If otp_secret doesn't exist, retrieve it or create it
if [[ -z "$otp_secret" ]]; then
	otp_secret=$(grep -oP "OTP_SECRET=\K\w+" $config)
	if [[ -z "$otp_secret" ]]; then
		otp_secret=$(ynh_string_random --length=128)
	fi
	ynh_app_setting_set --app=$app --key=otp_secret --value="$otp_secret"
fi

# If vapid_private_key doesn't exist, retrieve it or create it
if [[ -z "$vapid_private_key" ]]; then
	vapid_private_key=$(grep -oP "VAPID_PRIVATE_KEY=\K.+" $config)
	vapid_public_key=$(grep -oP "VAPID_PUBLIC_KEY=\K.+" $config)
	ynh_app_setting_set "$app" vapid_private_key "$vapid_private_key"
	ynh_app_setting_set "$app" vapid_public_key "$vapid_public_key"
fi

# If redis_namespace doesn't exist, create it
if [[ -z "$redis_namespace" ]]; then
	redis_namespace=${app}_production
	ynh_app_setting_set --app=$app --key=redis_namespace --value=$redis_namespace
fi

# If service doesn't exist, create it
if [[ -z "$service" ]]; then
	# Set `service` settings to support `yunohost app shell` command
	ynh_app_setting_set --app="$app" --key=service --value="$app-web.service"
fi

#Remove previous added repository
ynh_remove_extra_repo

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="stop" --log_path=/var/log/$app/$app-web.log --line_match="Stopped"
ynh_systemd_action --service_name=${app}-sidekiq --action="stop" --log_path=/var/log/$app/$app-sidekiq.log --line_match="Stopped"
ynh_systemd_action --service_name=${app}-streaming --action="stop" --log_path=/var/log/$app/$app-streaming.log --line_match="Stopped"

#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression --message="Adding swap if needed..." --weight=1

total_memory=$(ynh_get_ram --total)
swap_needed=0

if [ $total_memory -lt $memory_needed ]; then
	# Need a minimum of 8Go of memory
	swap_needed=$(($memory_needed - $total_memory))
fi

ynh_script_progression --message="Adding $swap_needed Mo to swap..."
ynh_add_swap --size=$swap_needed

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading Ruby and NodeJS..." --weight=1

ynh_exec_warn_less ynh_install_ruby --ruby_version=$ruby_version
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

#=================================================
# "REBUILD" THE APP (DEPLOY NEW SOURCES, RERUN NPM BUILD...)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download Mastodon
	ynh_setup_source --dest_dir="$install_dir/live" --keep="public/system/"

	chmod 750 "$install_dir"
	chmod -R o-rwx "$install_dir"
	chown -R $app:www-data "$install_dir"
fi

#=================================================
# BUILD ASSETS
#=================================================
ynh_script_progression --message="Building assets..." --weight=1

pushd "$install_dir/live"
	ynh_use_ruby
	ynh_gem update --system
	ynh_gem install bundler --no-document
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config deployment 'true'
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config without 'development test'
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle config set force_ruby_platform true --quiet
	ynh_exec_as $app $ynh_ruby_load_path $ld_preload bin/bundle install -j$(getconf _NPROCESSORS_ONLN)
	ynh_use_nodejs
	ynh_exec_as $app $ynh_node_load_PATH yarn install --pure-lockfile
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:clean
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails assets:precompile
popd

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

ynh_add_nginx_config

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-web" --template="mastodon-web.service"
yunohost service add "$app-web" --description="$app web service"

ynh_add_systemd_config --service="$app-sidekiq" --template="mastodon-sidekiq.service"
yunohost service add "$app-sidekiq" --description="$app sidekiq service"

ynh_add_systemd_config --service="$app-streaming" --template="mastodon-streaming.service"
yunohost service add "$app-streaming" --description="$app streaming service"

ynh_add_config --template="../conf/cron" --destination="/etc/cron.d/$app"

# Use logrotate to manage app-specific logfile(s)
mkdir -p /var/log/$app
chown $app:$app /var/log/$app
ynh_use_logrotate --non-append

#=================================================
# RECONFIGURE THE APP (UPDATE CONF, APPLY MIGRATIONS...)
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a config file..." --weight=1

language="$(echo $language | head -c 2)"

ynh_add_config --template="../conf/.env.production.sample" --destination="$config"

chmod 400 "$config"
chown $app:$app "$config"

#=================================================
# APPLY MIGRATIONS
#=================================================
ynh_script_progression --message="Applying migrations..." --weight=1

pushd "$install_dir/live"
	ynh_use_ruby
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/bundle exec rails db:migrate
	ynh_exec_warn_less ynh_exec_as $app RAILS_ENV=production $ynh_ruby_load_path $ld_preload bin/tootctl cache clear
popd

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=${app}-web --action="start" --log_path=/var/log/$app/$app-web.log --line_match="Listening on"
ynh_systemd_action --service_name=${app}-sidekiq --action="start" --log_path=/var/log/$app/$app-sidekiq.log --line_match="Schedules Loaded"
ynh_systemd_action --service_name=${app}-streaming --action="start" --log_path=/var/log/$app/$app-streaming.log --line_match="Worker 1 now listening"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
